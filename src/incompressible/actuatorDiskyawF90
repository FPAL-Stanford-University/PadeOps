module actuatorDiskmod_yawmod
    use kind_parameters, only: rkind, clen
    use constants, only: imi, zero,one,two,three,half,fourth, pi, kappa
    use decomp_2d
    use exits, only: GracefulExit, message
    use mpi 
    use reductions, only: p_maxval, p_sum
    use timer, only: tic, toc
    use Gridtools, only: linspace

    implicit none

    private
    public :: actuatorDisk_yaw
    
    real(rkind), parameter :: alpha_Smooth = 0.9d0 ! Exonential smoothing constant
    integer, parameter :: xReg = 4, yReg = 7, zReg = 7
    integer :: ntry

    type :: CloudMod
       real(rkind) :: xTurbLoc, yTurbLoc
       real(rkind), allocatable, dimension(:,:,:) :: dsq, eta_delta, source, xSmall, ySmall, zSmall
    end type

    type :: actuatorDisk_yaw
        ! Actuator Disk Info
        integer :: xLoc_idx, yLoc_idx, zLoc_idx, ActutorDiskID
        integer, dimension(:,:,:), allocatable :: tag_face 
        real(rkind) :: yaw, tilt
        real(rkind) :: xLoc, yLoc, zLoc
        real(rkind) :: diam, cT, pfactor, normfactor, OneBydelSq
        real(rkind) :: uface = 0.d0, vface = 0.d0, wface = 0.d0
        integer :: totPointsOnFace
        !real(rkind), dimension(:,:,:), allocatable :: eta_delta, dsq, xSmall, ySmall, zSmall, source
        real(rkind), dimension(:), allocatable :: xs, ys, zs
        integer, allocatable, dimension(:) :: xst, xen, yst, yen, zst, zen, xlen, ylen, zlen, nlen
        ! Grid Info
        integer :: nxLoc, nyLoc, nzLoc 
        real(rkind) :: delta ! Smearing size
        real(rkind) :: alpha_tau = 1.d0! Smoothing parameter (set to 1 for initialization) 
        real(rkind), dimension(:,:), allocatable :: rbuff
        real(rkind), dimension(:), allocatable ::  xLine, yLine, zLine

        type(CloudMod), allocatable, dimension(:) :: Cloud
        integer                                   :: max_num_clouds = 9

        logical :: wrapAround_x = .true., wrapAround_y = .false.
        ! MPI communicator stuff
        logical :: Am_I_Active, Am_I_Split, Am_I_SplitX, Am_I_SplitY, Am_I_SplitZ
        integer :: color, myComm, myComm_nproc, myComm_nrank

    contains
        procedure :: init
        procedure :: destroy
        procedure, private :: getMeanU
        procedure :: get_RHS
        !procedure, private :: smear_this_source 
    end type


contains

subroutine init(this, inputDir, ActuatorDiskID, xG, yG, zG, gpC)
    class(actuatorDisk_yaw), intent(inout) :: this
    real(rkind), intent(in), dimension(:,:,:), target :: xG, yG, zG
    integer, intent(in) :: ActuatorDiskID
    character(len=*), intent(in) :: inputDir
    type(decomp_info), target :: gpC

    character(len=clen) :: tempname, fname, turboutfname
    integer :: ioUnit, tmpSum, totSum
    real(rkind) :: xLoc=1.d0, yLoc=1.d0, zLoc=0.1d0, diam=0.08d0, cT=0.65d0
    real(rkind) :: yaw=0.d0, tilt=0.d0, epsFact = 1.5d0, dx, dy, dz
    real(rkind) :: yLocGhLo=1.d0, yLocGhUp=1.d0, totProjRadius, Lx, Ly, xLocGhLo, xLocGhUp
    real(rkind) :: xmin, xmax, ymin, ymax, zmin, zmax
    real(rkind), dimension(:,:), allocatable :: tmp,tmpGhlo,tmpGhUp
    integer, dimension(:,:), allocatable :: tmp_tag
    integer :: locator(1), ierr, stind, endind
    !integer :: xLc(1), yLc(1), zLc(1)
    integer :: icl
    logical :: periodicY = .true., periodicX = .true. ! hard coded for now
    logical :: dummylogical
    real(rkind) :: Lx, Ly, Lz
    
    namelist /ACTUATOR_DISK/ xLoc, yLoc, zLoc, diam, cT, yaw, tilt
    
    
    
    ! STEP 1: READ IN THE TURBINE INPUT FILE
    write(tempname,"(A13,I3.3,A10)") "ActuatorDisk_", ActuatorDiskID, "_input.inp"
    fname = InputDir(:len_trim(InputDir))//"/"//trim(tempname)

    ioUnit = 55
    open(unit=ioUnit, file=trim(fname), form='FORMATTED')
    read(unit=ioUnit, NML=ACTUATOR_DISK)
    close(ioUnit)
    
    this%xLoc = xLoc; this%yLoc = yLoc; this%zLoc = zLoc
    this%cT = cT; this%diam = diam; this%yaw = this%yaw
    dx=xG(2,1,1)-xG(1,1,1); dy=yG(1,2,1)-yG(1,1,1); dz=zG(1,1,2)-zG(1,1,1)
    this%nxLoc = size(xG,1); this%nyLoc = size(xG,2); this%nzLoc = size(xG,3)
    this%delta = epsFact * (dx*dy*dz)**(1.d0/3.d0)
    this%OneByDelSq = 1.d0/(this%delta**2)

    Lx = p_maxval(maxval(xG)) + dx
    Ly = p_maxval(maxval(yG)) + dy
    Lz = p_maxval(maxval(zG)) + dz/2.d0

    allocate(this%xLine(size(xG,1)))
    allocate(this%yLine(size(xG,2)))
    allocate(this%zLine(size(xG,3)))
    this%xLine = xG(:,1,1); this%yLine = yG(1,:,1); this%zLine = zG(1,1,:)
   

    ! STEP 2: Get the region of influence
    totProjRadius = diam  ! Distance away from the rotor hub
   
    ! Along the x axis (remember that the data is always in x-decomposition
    if (((xLoc - totProjRadius) < 0.d0) .or. ((xLoc - totProjRadius) < 0.d0)) then 
       this%wrapAroundX = .true.
    end if

    if (this%wrapAroundX = .true.)

    else
      this%xst = minloc(abs(xG(:,1,1) - (xLoc - totProjRadius)))
      this%xen = minloc(abs(xG(:,1,1) - (xloc + totProjRadius)))
    end if

    ! Along the y axis (this could be split
    call get_extents(yLoc-totProjRadius, yLoc+totProjRadius, yG(1,:,1), stind, endind, this%Am_I_Active, this%Am_I_SplitY); this%yst(icl) = stind; this%yen(icl) = endind
    if(this%Am_I_Active) then
        call get_extents(zLoc-totProjRadius, zLoc+totProjRadius, zG(1,1,:), stind, endind, this%Am_I_Active, this%Am_I_SplitZ); this%zst(icl) = stind; this%zen(icl) = endind
    endif
    if(this%Am_I_Active) then
       allocate(this%tag_face(this%xst:this%xen, this%yst:this%yen, this%zst:this%zen))
    endif


    tmp = sqrt((yG(1,:,:) - yLoc)**2 + (zG(1,:,:) - zLoc)**2)
    if(periodicX) then
      Lx = dx*gpC%xsz(1)
      xLocGhLo = xLoc - Lx; xLocGhUp = xLoc + Lx
    else
      xLocGhLo = xLoc; xLocGhUp = xLoc
    endif
    if(periodicY) then
      Ly = dy*gpC%ysz(2)
      yLocGhLo = yLoc - Ly
      tmpGhLo = sqrt((yG(1,:,:) - yLocGhLo)**2 + (zG(1,:,:) - zLoc)**2)

      yLocGhUp = yLoc + Ly
      tmpGhUp = sqrt((yG(1,:,:) - yLocGhLo)**2 + (zG(1,:,:) - zLoc)**2)
    else
      tmpGhLo = 10.0_rkind*totProjRadius
      tmpGhUp = 10.0_rkind*totProjRadius
    endif

    tmpSum = sum(this%tag_face)
    this%totPointsOnface = p_sum(tmpSum)
        
    this%pfactor = one/((this%delta**3)*(pi**(3.d0/2.d0)))
    if (this%Am_I_Split) then
        call MPI_COMM_SPLIT(mpi_comm_world, this%color, nrank, this%mycomm, ierr)
        call MPI_COMM_RANK( this%mycomm, this%myComm_nrank, ierr ) 
        call MPI_COMM_SIZE( this%mycomm, this%myComm_nproc, ierr )
    else
        this%myComm_nrank = -1
    end if 

    
    if (this%Am_I_Active) then
        allocate(this%rbuff(size(xG,2),size(xG,3)))
        ntry = 2*ceiling(diam/min(dx, dy, dz))
        call sample_on_circle(diam/2.d0,yLoc,zLoc, this%ys,this%zs,ntry)
        allocate(this%xs(size(this%ys)))
        this%xs = xLoc
        this%normfactor = (1.d0/(real(size(this%xs),rkind)))*this%pfactor
    else
        deallocate(this%tag_face)
    end if 

    deallocate(tmp)
end subroutine 

subroutine destroy(this)
    class(actuatorDisk_yaw), intent(inout) :: this
    integer :: icl

    if (Allocated(this%rbuff))  deallocate(this%rbuff)
    if (Allocated(this%tag_face))  deallocate(this%tag_face)
   
    do icl = 1, this%max_num_clouds
      if(this%nlen(icl) > 0) then
          deallocate(this%Cloud(icl)%dsq, this%Cloud(icl)%source, this%Cloud(icl)%eta_delta)
          deallocate(this%Cloud(icl)%xSmall, this%Cloud(icl)%ySmall, this%Cloud(icl)%zSmall)
      endif
    enddo
    deallocate(this%xst,this%yst,this%zst,this%xen,this%yen,this%zen,this%xlen,this%ylen,this%zlen,this%nlen,this%Cloud)
 
end subroutine 

subroutine get_tag_face(this)
    class(actuatorDisk_yaw), intent(inout) :: this

    ! use xLoc, yLoc, zLoc, yaw and tilt
    ! return tag_face

    xsbmin = this%xLoc - half*this%diam*sin(this%yaw);     xsbmax = this%xLoc + half*this%diam*sin(this%yaw)
    ysbmin = this%yLoc - half*this%diam*cos(this%yaw);     ysbmax = this%yLoc + half*this%diam*cos(this%yaw)

    !do k = this%zst, this%zen
    !  do j = this%yst, this%yen
    !      locator = minloc()
    !      this%tag_face(
    !    do i = this%xst, this%xen

end subroutine

subroutine getMeanU(this, u, v, w) 
    class(actuatorDisk_yaw), intent(inout) :: this
    real(rkind), dimension(this%nxLoc,this%nyLoc,this%nzLoc), intent(in) :: u, v, w
    real(rkind) :: tmpSum, umn, vmn, wmn
    
    ! Get u face
    this%rbuff = u(this%xLoc_idx,:,:)
    this%rbuff = this%rbuff*this%tag_face
    if (this%AM_I_Split) then
        tmpSum = p_sum(sum(this%rbuff),this%myComm) 
        umn = tmpSum/real(this%totPointsOnFace,rkind)
    else
        umn = sum(this%rbuff)/real(this%totPointsOnFace,rkind)
    end if

    ! Get v face
    this%rbuff = v(this%xLoc_idx,:,:)
    this%rbuff = this%rbuff*this%tag_face
    if (this%AM_I_Split) then
        tmpSum = p_sum(sum(this%rbuff),this%myComm) 
        vmn = (tmpSum)/real(this%totPointsOnFace,rkind)
    else
        vmn = sum(this%rbuff)/real(this%totPointsOnFace,rkind)
    end if
    
    ! Get w face
    this%rbuff = w(this%xLoc_idx,:,:)
    this%rbuff = this%rbuff*this%tag_face
    if (this%AM_I_Split) then
        tmpSum = p_sum(sum(this%rbuff),this%myComm) 
        wmn = (tmpSum)/real(this%totPointsOnFace,rkind)
    else
        wmn = sum(this%rbuff)/real(this%totPointsOnFace,rkind)
    end if

    this%uface = this%alpha_tau*umn + (1.d0 - this%alpha_tau)*this%uface
    this%vface = this%alpha_tau*vmn + (1.d0 - this%alpha_tau)*this%vface
    this%wface = this%alpha_tau*wmn + (1.d0 - this%alpha_tau)*this%wface
    this%alpha_tau = alpha_smooth

end subroutine

subroutine get_RHS(this, u, v, w, rhsxvals, rhsyvals, rhszvals, inst_val)
    class(actuatorDisk_yaw), intent(inout), target :: this
    real(rkind), dimension(this%nxLoc, this%nyLoc, this%nzLoc), intent(inout) :: rhsxvals, rhsyvals, rhszvals
    real(rkind), dimension(this%nxLoc, this%nyLoc, this%nzLoc), intent(in)    :: u, v, w
    real(rkind), dimension(8),                                  intent(out), optional  :: inst_val
    integer :: j, icl
    real(rkind), dimension(:,:,:), pointer :: xCloudPtr, yCloudPtr, zCloudPtr, dsqPtr, eta_deltaPtr, sourcePtr
    real(rkind) :: usp_sq, force

    if (this%Am_I_Active) then
        call this%getMeanU(u,v,w)
        usp_sq = this%uface**2 !+ this%vface**2 + this%wface**2
        force = -this%normfactor * 0.5d0*this%cT*(pi*(this%diam**2)/4.d0)*usp_sq
        do icl = 1, this%max_num_clouds
          if(this%nlen(icl) < 1) cycle
          xCloudPtr => this%Cloud(icl)%xSmall; yCloudPtr    => this%Cloud(icl)%ySmall;    zCloudPtr => this%Cloud(icl)%zSmall
          dsqPtr    => this%Cloud(icl)%dsq;    eta_deltaPtr => this%Cloud(icl)%eta_delta; sourcePtr => this%Cloud(icl)%source
          sourcePtr = 0.d0
          do j =1,size(this%xs)
              dsqPtr = (xCloudPtr - this%xs(j))**2 + (yCloudPtr - this%ys(j))**2 + (zCloudPtr - this%zs(j))**2 
              dsqPtr = exp(-dsqPtr*this%oneByDelSq)
              eta_deltaPtr = (force) * dsqPtr
              sourcePtr = sourcePtr + eta_deltaPtr
          end do
          rhsxvals(this%xst(icl):this%xen(icl),this%yst(icl):this%yen(icl),this%zst(icl):this%zen(icl)) = sourcePtr
          rhsyvals(this%xst(icl):this%xen(icl),this%yst(icl):this%yen(icl),this%zst(icl):this%zen(icl)) = 0.d0
          rhszvals(this%xst(icl):this%xen(icl),this%yst(icl):this%yen(icl),this%zst(icl):this%zen(icl)) = 0.d0
          nullify(sourcePtr, eta_deltaPtr, dsqPtr, zCloudPtr, yCloudPtr, xCloudPtr)
        end do
        if (present(inst_val)) then
          if((this%Am_I_Split .and. this%myComm_nrank==0) .or. (.not. this%Am_I_Split)) then
            inst_val(1) = force
            inst_val(2) = force*sqrt(usp_sq)
            inst_val(3) = sqrt(usp_sq)
            inst_val(4) = usp_sq
            inst_val(5) = usp_sq*inst_val(3)
            inst_val(6) = this%uface
            inst_val(7) = this%vface
            inst_val(8) = this%wface
          end if
        end if 
    end if 
end subroutine

!subroutine smear_this_source(this, xC, yC, zC, valSource)
!    class(actuatorDisk_yaw), intent(inout) :: this
!    real(rkind), intent(in) :: xC, yC, zC, valSource
!
!    this%dsq = (this%xSmall - xC)**2 + (this%ySmall - yC)**2 + (this%zSmall - zC)**2 
!    this%dsq = -this%dsq*this%oneByDelSq
!    this%eta_delta = (valSource*this%normfactor) * exp(this%dsq)
!    this%source = this%source + this%eta_delta
!
!end subroutine 

subroutine sample_on_circle(R,xcen, ycen, xloc,yloc,np)
    use gridtools, only: linspace
    real(rkind), intent(in) :: R
    integer, intent(in) :: np
    real(rkind), intent(in) :: xcen, ycen
    integer, dimension(:), allocatable :: tag
    real(rkind), dimension(:), allocatable :: xline, yline
    real(rkind), dimension(:), allocatable, intent(out) :: xloc, yloc
    real(rkind), dimension(:), allocatable :: xtmp, ytmp, rtmp
    integer :: idx, i, j, nsz, iidx

    allocate(xline(np),yline(np))
    allocate(xtmp(np**2),ytmp(np**2), rtmp(np**2), tag(np**2))
    
    xline = linspace(-R,R,np+1)
    yline = linspace(-R,R,np+1)
    idx = 1
    do j = 1,np
        do i = 1,np
            xtmp(idx) = xline(i); ytmp(idx) = yline(j)
            idx = idx + 1
        end do 
    end do
    rtmp = sqrt(xtmp**2 + ytmp**2) 
    tag = 0
    where (rtmp < R) 
        tag = 1
    end where
    nsz = sum(tag)
    allocate(xloc(nsz), yloc(nsz))
    iidx = 1
    do idx = 1,size(tag)
        if (tag(idx) == 1) then
            xloc(iidx) = xtmp(idx)
            yloc(iidx) = ytmp(idx)
            iidx = iidx + 1
        end if
    end do

    xloc = xloc + xcen; yloc = yloc + ycen 
end subroutine

pure subroutine get_extents(xmin, xmax, procmesh, stind, endind, isactive, issplit)
    real(rkind), intent(in) :: xmin, xmax
    real(rkind), dimension(:), intent(in) :: procmesh
    integer, intent(out) :: stind, endind
    logical, intent(out) :: isactive, issplit

    integer :: nloc, ind!, ist, iend

    nloc = size(procmesh)

    ! determine x extents
    if(xmax < procmesh(1)) then
       ! turbine i influence is exclusively to the left of this processor
       stind = 0; endind = -1; isactive = .false.
       return
    endif
    if(xmin > procmesh(nloc)) then
       ! turbine i influence is exclusively to the right of this processor
       stind = 0; endind = -1; isactive = .false.
       return
    endif

    ! turbine i influences this processor
       isactive = .true.

       if(xmin <= procmesh(1) .and. (xmax >= procmesh(nloc))) then
         ! turbine i influence is larger than this processor mesh
         stind = 1; endind = nloc;
         issplit = .true.
         return
       endif

       if(xmin <= procmesh(1) .and. (xmax <= procmesh(nloc))) then
         ! overlap to the left
         stind = 1; 
         endind = minloc(abs(procmesh-xmax));
         if(procmesh(endind) > xmax) endind = endind-1
         issplit = .true.
         return
       endif

       if(xmin >= procmesh(1) .and. (xmax >= procmesh(nloc))) then
         ! overlap to the right
         endind = nloc;
         stind = minloc(abs(procmesh-xmin))
         if(procmesh(stind) < xmin) stind = stind+1
         issplit = .true.
         return
       endif

       if(xmin >= procmesh(1) .and. (xmax <= procmesh(nloc))) then
         ! all in
         stind = minloc(abs(procmesh-xmin))
         if(procmesh(stind) < xmin) stind = stind+1

         endind = minloc(abs(procmesh-xmax));
         if(procmesh(endind) > xmax) endind = endind-1

         issplit = .false.
         return
       endif


       !! determine stind
       !if(xmin < procmesh(1)) then
       !   stind = 1
       !else
       !   stind = -1
       !   do ind = 1, nloc-1
       !     if(xmin >= procmesh(ind) .and. xmin < procmesh(ind+1)) exit
       !   enddo
       !   stind = ind+1
       !   !if(ind == nloc) then
       !   !   write(*,*) 'Something wrong. Check details.', xmin, procmesh(1), procmesh(nloc)
       !   !   call GracefulExit("Exiting from min extents setup", 423)
       !   !endif
       !endif

       !! determine endind
       !if(xmax > procmesh(nloc)) then
       !   endind = nloc
       !else
       !   endind = -1
       !   do ind = 1, nloc-1
       !     if(xmax >= procmesh(ind) .and. xmax < procmesh(ind+1)) exit
       !   enddo
       !   endind = ind
       !   !if(ind == nloc) then
       !   !   write(*,*) 'Something wrong. Check details.', xmax, procmesh(1), procmesh(nloc)
       !   !   call GracefulExit("Exiting from max extents setup", 423)
       !   !endif
       !endif
end subroutine


end module 
