program test_cd10

    use kind_parameters, only: rkind
    use constants,       only: two,pi,half,zero
    use timer,           only: tic,toc
    use cd10stuff,       only: cd10
    implicit none

    integer :: nx = 256, ny=32, nz=32

    logical :: periodic = .FALSE.
    logical :: xcentered = .TRUE.

    type( cd10 ) :: xcd10, ycd10, zcd10
    real(rkind), dimension(:,:,:), allocatable :: x,y,z,f,df,df_exact,d2f,d2f_exact
    real(rkind) :: dx, dy, dz, xfst, x1err, x2err, y1err, y2err, z1err, z2err
    real(rkind), parameter :: omega = 1._rkind

    integer :: i,ierr, j, k,xa=0,xb=0
    character(len=15) :: fname
    character :: per_str,cent_str,xa_str,xb_str

    open(10,file='input.in',status='old',action='read')
    read(10,*) nx, ny, nz
    read(10,*) periodic
    read(10,*) xcentered
    read(10,*) xa, xb
    close(10)

    allocate( x(nx,ny,nz) )
    allocate( y(nx,ny,nz) )
    allocate( z(nx,ny,nz) )
    allocate( f(nx,ny,nz) )
    allocate( df(nx,ny,nz) )
    allocate( df_exact(nx,ny,nz) )
    allocate( d2f(nx,ny,nz) )
    allocate( d2f_exact(nx,ny,nz) )

    if (periodic) then
        dx = two*pi/real(nx,rkind)
        dy = two*pi/real(ny,rkind)
        dz = two*pi/real(nz,rkind)
    else
        dx = pi/two/real(nx-1,rkind)
        dy = pi/two/real(ny-1,rkind)
        dz = pi/two/real(nz-1,rkind)
    end if
    
    if(xcentered) then
      xfst = half*dx
      dx = pi/two/real(nx,rkind)
    else
      xfst = zero
    endif


    do k=1,nz
        do j=1,ny
            do i=1,nx
                x(i,j,k) = real(i-1,rkind)*dx + xfst
                y(i,j,k) = real(j-1,rkind)*dy
                z(i,j,k) = real(k-1,rkind)*dz
            end do
        end do 
    end do 
    !print*, "Created initial data"

    f = cos(omega * x) * cos(omega * y) * cos(omega * z)
    ierr = xcd10%init( nx, dx, periodic, xcentered, 0, 0)
    ierr = ycd10%init( ny, dy, periodic, .false., 0, 0)
    ierr = zcd10%init( nz, dz, periodic, .false., 0, 0)

    !call tic() 
    call xcd10 % dd1(f,df,ny,nz,xa,xb)
    call xcd10 % d2d1(f,d2f,ny,nz,xa,xb)
    !call toc ("Time to get the x derivative:")
    df_exact =-omega* sin(omega * x)  * cos(omega * y) * cos(omega * z)
    d2f_exact = -omega* omega* cos(omega * x)  * cos(omega * y) * cos(omega * z)
    !print*, "Maximum error (first  der) = ", MAXVAL( ABS(df - df_exact)), " at ", MAXLOC(ABS(df - df_exact))
    !print*, "Maximum error (second der) = ", MAXVAL( ABS(d2f - d2f_exact)), " at ", MAXLOC(ABS(d2f - d2f_exact))
    !write(*,'(a,7(e19.12,1x))') 'exact: ', df_exact(1:7,1,1)
    !write(*,'(a,7(e19.12,1x))') 'numer: ', df(1:7,1,1)
    x1err = MAXVAL(ABS(df-df_exact))
    x2err = MAXVAL(ABS(d2f-d2f_exact))

    !open(10,file='debug.dat',status='unknown',action='write')
    !do i = 1, nx
    !  write(10,'(6(e19.12,1x))') x(i,1,1), f(i,1,1), df(i,1,1), df_exact(i,1,1), d2f(i,1,1), d2f_exact(i,1,1)
    !enddo
    !close(10)

    !call tic() 
    call ycd10 % dd2(f,df,nx,nz,1,-1)
    call ycd10 % d2d2(f,d2f,nx,nz,1,-1)
    !call toc ("Time to get the y derivative:")
    df_exact =-omega* sin(omega * y)  * cos(omega * x) * cos(omega * z)
    d2f_exact = -omega* omega* cos(omega * y)  * cos(omega * x) * cos(omega * z)
    !print*, "Maximum error (first  der) = ", MAXVAL( ABS(df - df_exact)), " at ", MAXLOC(ABS(df - df_exact))
    !print*, "Maximum error (second der) = ", MAXVAL( ABS(d2f - d2f_exact)), " at ", MAXLOC(ABS(d2f - d2f_exact))
    y1err = MAXVAL(ABS(df-df_exact))
    y2err = MAXVAL(ABS(d2f-d2f_exact))

    !call tic() 
    call zcd10 % dd3(f,df,nx,ny,1,-1)
    call zcd10 % d2d3(f,d2f,nx,ny,1,-1)
    !call toc ("Time to get the z derivative:")
    df_exact =-omega* sin(omega * z)  * cos(omega * y) * cos(omega * x)
    d2f_exact = -omega* omega* cos(omega * z)  * cos(omega * y) * cos(omega * x)
    !print*, "Maximum error (first  der) = ", MAXVAL( ABS(df - df_exact)), " at ", MAXLOC(ABS(df - df_exact))
    !print*, "Maximum error (second der) = ", MAXVAL( ABS(d2f - d2f_exact)), " at ", MAXLOC(ABS(d2f - d2f_exact))
    z1err = MAXVAL(ABS(df-df_exact))
    z2err = MAXVAL(ABS(d2f-d2f_exact))

    per_str = 'F'
    if(periodic) per_str='T'

    cent_str = 'F'
    if(xcentered) cent_str='T'

    if(xa==0) then
      xa_str = 'X'
    elseif(xa==1) then
      xa_str = 'S'
    elseif(xa==-1) then
      xa_str = 'A'
    endif

    if(xb==0) then
      xb_str = 'X'
    elseif(xb==1) then
      xb_str = 'S'
    elseif(xb==-1) then
      xb_str = 'A'
    endif

    write(fname,'(a7,4(a1),a4)') 'errors_', per_str, cent_str, xa_str, xb_str, '.dat'
    open(10,file=fname,status='unknown',action='write',position='append')
    write(10,'(3(i4.4,1x),6(e12.5,1x))') nx, ny, nz, x1err, x2err, y1err, y2err, z1err, z2err
    close(10)
    print *, fname

    call xcd10%destroy()
    call ycd10%destroy()
    call zcd10%destroy()

    deallocate( x )
    deallocate( f )
    deallocate( df )
    deallocate( df_exact )

end program
