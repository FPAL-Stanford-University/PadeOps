&INPUT
inputdir              = "/work/05294/mhowland/stampede2/PadeOpsData/robust/aligned/"   ! Directory for any input files
outputdir             = "/scratch/05294/mhowland/neutral_concurrent/robust/off"   ! Directory for all output files
nx                    = 480         ! Number of points in X
ny                    = 240          ! Number of points in Y
nz                    = 192          ! Number of points in Z
tstop                 = 40000.D0    ! Physical time to stop the simulation
CFL                   = -1.0D0        ! CFL criterion for calculating the time step (Set to negative to disable)
dt                    = 3.8D-2        ! Fixed time step value (only used if CFL is set to negative)
nsteps                = 999999
prow                  = 16            ! Number of rows in 2D processor decomposition (set 0 for auto-tuning)
pcol                  = 32            ! Number of rows in 2D processor decomposition (set 0 for auto-tuning)
useRestartFile        = .TRUE.      ! Set to false if it's a fresh simulation 
restartFile_TID       = 81000       ! TimeID of the restart file being used
restartFile_RID       = 2            ! RunID of the restart file being used
CviscDT               = 1.D0
/
/
&NUMERICS
AdvectionTerm         = 1           ! 0: Rotational Form, 1: Skew-Symmetric Form (use this for Compact Scheme)
ComputeStokesPressure = .TRUE.      ! This would be FALSE only is very special circumstances.  
NumericalSchemeVert   = 1           ! 0: Second order FD, 1: Sixth order Compact Difference (CD06), 2: Fourier Collocation
useDealiasFilterVert  = .FALSE.     ! Dealiasing filter used in vertical direction
t_DivergenceCheck     = 50          ! Check divergence every $ timesteps. Reproject if needed.
TimeSteppingScheme    = 2           ! 0: Adams-Bashforth, 1: TVD-RK3, 2: SSP-RK45
InitSpinUp            = .FALSE.     ! Use buoyancy forcing to initiate turbulence? 
useExhaustiveFFT      = .TRUE. 
dealiasFact           = 0.6667d0
scheme_xy             = "FOUR"
donot_dealias         = .FALSE.
/
/
&IO
RunID                 = 2          ! Run Label (All output files will be tagged with this nubber)
t_restartDump         = 2000       ! Restart File Dumping Frequency  (# of timesteps)
t_dataDump            = 5000       ! Data dumping frequency (# of timesteps)
ioType                = 0          ! 0: Fortran Binaries, 1: .vtk files
dumpPlanes            = .FALSE.     ! Dump plane visualations. Select planes in initialize.F90
t_planeDump           = 5         ! Plane dumping frequency (# of timesteps)
t_start_planeDump     = 1          ! When do you want to start dumping planes?
t_stop_planeDump      = 10000       ! When do you want to stop dumping planes?
VizDump_Schedule      = 0          ! 0: dumps every n time steps, 1: dumps every tau time
deltaT_dump           = 1.D0       ! If VizDump_Schedule=1, this is delta t tau?
useProbes             = .FALSE.     ! Use probes?
dump_NU_SGS           = .FALSE.    ! Dump nu_sgs?
dump_KAPPA_SGS        = .FALSE.    ! Dump kappa_sgs?
t_start_pointProbe    = 1          ! When do you want to start recording data?
t_stop_pointProbe     = 200000     ! When do you want to end recording data?
t_pointProbe          = 1000       ! How often do you want to write probe data to disk? 
/
/
&STATS
tid_StatsDump         = 20000       ! Dumping Frequency for Statistics file (# of time steps)
tid_compStats         = 10          ! Frequency of Computing Statistics
tSimStartStats        = 999999.d0       ! Simulation time for starting stats calculations 
normStatsByUstar      = .FALSE.     ! Normalize Statistics by ustar at each instant
computeSpectra        = .FALSE.     ! Compute and time average x - spectra on the run
timeAvgFullFields     = .FALSE.     ! Time average and store fields on the run
computeVorticity      = .FALSE.     ! Compute and write vorticity?
/
/
&OS_INTERACTIONS
useSystemInteractions = .TRUE.      ! Do you wish to interact with the program while its running
tSystemInteractions   = 5          ! Check for interactions commands after these many time steps
controlDir            = "null"      ! Check in this directory for command files (NULL = Check in output directory)
deleteInstructions    = .false.     ! Do you want to delete instruction after reading it? 
/
/
&PHYSICS
isInviscid            = .TRUE.      ! Is this an inviscid simulation?
useCoriolis           = .TRUE.      ! Activate the coriolis term? 
useExtraForcing       = .FALSE.     ! Is an extra forcing term being used? (non-Geostrophic forcing only)
isStratified          = .TRUE.     ! Use Stratification / active scalar in momentum
useMoisture           = .FALSE.     ! Include moisture (passive scalar) transport?
Re                    = 1.D10       ! Reynolds Number; used when isInvisid is FALSE
Ro                    = 171.4180D0       ! Rossby Number used when Coriolis is ON
Pr                    = 0.4D0       ! Turbulent Prandtl Number; used when 
Fr                    = 0.0798188571D0       ! Froude number; used when isStratified is TRUE
Ra                    = 1.D14       ! Rayleigh number; used when isStratified is TRUE && BuoyancyTermType==3
useSGS                = .true.      ! Do you want to use the SGS model?  
PrandtlFluid          = 1.0D0       ! ?????
BulkRichardson        = 0.0D0       ! Used if isStratified is TRUE && BuoyancyTermType==2
BuoyancyTermType      = 1           ! Used if isStratified is TRUE. 1: (Fr, ThetaRef); 2:BulkRichardson; 3: (Ra, Re)
useforcedStratification = .FALSE.   ! ????
useGeostrophicForcing = .TRUE.      ! This is true if forcing is provided using the coriolis term  
G_geostrophic         = 1.D0        ! Geostrophic wind speed 
G_alpha               = 0.D0        ! Geostrophic wind angle (degrees, from +x axis)
dPfdx                 = 0.D0        ! Additional Acceleration in X; used if useExtraForcing is ON
dPfdy                 = 0.D0        ! Additional Acceleration in Y; used if useExtraForcing is ON
dPfdz                 = 0.D0        ! Additional Acceleration in Z; used if useExtraForcing is ON
assume_fplane         = .FALSE.      ! Assume fplane (ignore horizontal component of Coriolis force)? 
latitude              = 45.d0       ! Latitude; important if useCoriolis is TRUE && assume_fplane is FALSE
frameAngle            = 0.D0        ! Mean wind direction; important if assume_fplane is FALSE
useHITforcing         = .false.     ! Use additional HIT forcing? 
useScalars            = .false.     ! Do you want to use scalars? --Why was this true for AD????
buoyancyDirection     = 3           ! Are 1 and 2 implemented????
/
/
&PRESSURE_CALC
fastCalcPressure      = .FALSE.      ! Compute and store pressure at every time step using the faster algorithm?
storePressure         = .FALSE.     ! Would you like to compute and store pressure?
P_dumpFreq            = 100         ! How often (timesteps) do you want to dump pressure?
P_compFreq            = 10          ! How often (timesteps) do you want to compute pressure? 
computeDNSPressure    = .FALSE.
computeFringePressure = .FALSE.
computeTurbinePressure    = .FALSE.
computeRapidSlowPressure  = .FALSE.
/
/
&BCs
PeriodicInZ           = .FALSE.      ! Is the problem periodic in Z? If yes, then everything below is ignored. 
botWall               = 3           ! no_slip = 1, slip = 2, wall model = 3
topWall               = 2           ! no_slip = 1, slip = 2
useSpongeLayer        = .TRUE.     ! Use a sponge layer at the top 
zstSponge             = 0.75d0       ! Height above which the sponge layer is active
SpongeTscale          = 40.d0       ! e-folding time to dt ratio (somewhere between 10 - 50) 
sponge_type           = 1           ! 1 or 2; used if useSpongeLayer is TRUE
botBC_Temp            = 1           ! 0: Dirichlet; 1: Homog. Neumann; 2: Inhomog. Neumann; 3: ????
topBC_temp            = 0           ! 0: Dirichlet; 1: Homog. Neumann; 2: Inhomog. Neumann; 3: ????
useTopAndBottomSymmetricSponge = .FALSE. 
useFringe             = .FALSE.     ! Use Fringe/Buffer region in x or y directions?
usedoubleFringex      = .FALSE.      ! Use two fringes (in x)?
usecontrol            = .FALSE.     ! Use frame angle controller?
/
/
&SGS_MODEL
SGSModelID                    = 1            ! 0: smagorinsky, 1: sigma, 2: AMD 
DynamicProcedureType          = 0            ! 0: no dynamic procedure, 1: Standard Dynamic Procedure, 2: Global Dynamic Procedure
z0                            = 2.5d-4
DynProcFreq                   = 1            ! Dynamic procedure used every DYNPROCFREQ timesteps. 
UseDynamicProcedureScalar     = .false.      ! Use dynamic procedure to compute the turbulent prandtl number? 
deltaRatio                    = 2.d0 
useWallDamping                = .FALSE.      ! Use the Wall Damping Function 
ncWall                        = 3.d0         ! Wall Damping Function Exponent
Csgs                          = 0.90d0       ! Asymptotic model constant (wall damping function)
WallModelType                 = 1            ! 0: no wall model, 1: Moeng's wall model, 2: Bou-zeid wall model
usePrSGS                      = .false.
useSGSDynamicRestart          = .false.
explicitCalcEdgeEddyViscosity = .false.      ! Explicitely compute eddy viscosity at edges? or interpolate? 
useVerticalTfilter            = .false.      ! Vertical filtering used for dynamic procedure? 
SGSDynamicRestartFile         = "null"
useDynamicProcedureScalar     = .false.
turbPrandtl                   = 0.4d0
useScalarBounding             = .false.
Cy                            = 1.0d2
lowbound                      = 0.0d0
highbound                     = 1.0d0
WM_MatchingIndex              = 1
/
/
&WINDTURBINES
useWindTurbines       = .FALSE.    ! Do you want to use Wind turbines ?
num_turbines          = 36
ADM                   = .TRUE.    ! FALSE would be ALM, which is not implemented/linked fully
turbInfoDir           = "XXXX"
ADM_Type              = 2         ! 1 or 2. 2 is optimized and well tested. Use 1 at your own risk.
/
/
&FRINGE
apply_x_fringe = .FALSE.
apply_y_fringe = .FALSE.
Fringe_xst           = 0.5d0 ! It starts at this point, the fringe is off before this point         
Fringe_xen           = 0.90d0 ! This is the end of the fringe, the fringe is zero after
Fringe_delta_st_x    = 0.300d0 ! How much distance to use to ramp up
Fringe_delta_en_x    = 0.1d0 ! How much distance to ramp down
LambdaFact            = 0.30d0 ! If code is blowing up because of fringe, drop lambdafact and increase fringe size 
Fringe_yst           = 0.5d0 ! Same but for y        
Fringe_yen           = 0.90d0
Fringe_delta_st_y    = 0.300d0
Fringe_delta_en_y    = 0.1d0
/
/
&BUDGET_TIME_AVG
do_budgets            = .FALSE.    ! Perform budget calculations? 
budgetType            = 0         ! See type descriptions in budget_time_avg.F90
budgets_dir           = "XXXX"    ! Write in default output directory
tidx_compute          = 5         ! How often should budgets be computed?  
tidx_dump             = 10000      ! How often should budget files be written to disk? 
tidx_budget_start     = 30000      ! Start budget computation from this timestep onward
restart_budgets       = .FALSE.   ! use existing budget file to restart budget calculations? 
restart_rid           = 2         ! Restart budget file run index
restart_tid           = 99999     ! Restart budget file time index
restart_counter       = 11111     ! Restart budget file counter 
/
/
/
&KSPREPROCESS
PreprocessForKS       = .FALSE.        ! Do you want to generate preprocessing files for KS? 
KSoutputDir           = "SomeLocation" ! Directory where KS files are dumped.
KSRunID               = 99             ! RunID tag for KS files
t_dumpKSprep          = 10             ! Dumping Frequency for KS files
KSInitType            = 0
KSFilFact             = 4.D0
KSdoZfilter           = .true.
nKSvertFilt           = 1
/
/
&SCALARS
num_scalars      = 0    ! was 2; why is scalar used????
scalar_info_dir  = "/fastscratch/nghaisas/runs/PadeOps/budget_tavg_test/hit-ad/run1"
/
/
&TURB_PRESSURE
MeanTIDX         = 1
MeanRID          = 1
MeanFilesDir     = "null"
/
/
&CONTROL
beta                          =  0.03d0      ! 0.08d3,0.0278 Integrator tuning parameter (appropriate non-dimensionalized)
sigma                         =  3.995d0     ! 3.995d0 Time constant for filter for rotation rate
phi_ref                       =  0.d0        ! Desired degrees at z_ref
z_ref                         =  9         ! Index of desired phi_ref
alpha                         =  0.d0        ! Proportional gain constant
controlType                   =  1           ! 1: Meneveau 2014, 2: Control G_alpha
angleTrigger                  =  0.1d0         ! Angle at z_ref where control turns on
/
/
&MOISTURE
moistureFactor    = 0.61D0
moisture_info_dir = "null"
/
/
&PROBLEM_INPUT
Lx                            =  30.0d0       ! Domain Length (appropriate dimesnions/non-dimensionalized)
Ly                            =  15.d0       ! Domain Width  (appropriate dimesnions/non-dimensionalized)
Lz                            =  6.0d0       ! Domain Height (appropriate dimesnions/non-dimensionalized)
Tref                          =  263.5d0     ! Reference Temp.
Tsurf0                        =  265.0d0     ! Surface Temp. (at tsim=0) in K (need to take care of the dimensions)
dTsurf_dt                     =  0.0D0      ! Surface Temp. decrease rate in K/hr. (need to take care of the dimensions)
z0init                        =  2.5d-4       ! Roughness scale used to initialize the profile
frameAngle                    =  0.d0      ! Frame angle set to be the same as above, used for initialization
/
